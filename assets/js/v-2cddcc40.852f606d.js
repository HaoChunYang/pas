(self.webpackChunkbugu=self.webpackChunkbugu||[]).push([[4067],{3724:(e,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>s});const s={key:"v-2cddcc40",path:"/old_blog/iOS%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87UUID%E5%8F%8AKeyChain%E5%AD%98%E5%82%A8.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"iOS获取设备UUID",slug:"ios获取设备uuid",children:[]},{level:2,title:"KeyChain",slug:"keychain",children:[]}],filePathRelative:"old_blog/iOS获取设备UUID及KeyChain存储.md",git:{updatedTime:1597237797e3}}},8033:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});const s=(0,a(6252).uE)('<h2 id="ios获取设备uuid"><a class="header-anchor" href="#ios获取设备uuid">#</a> iOS获取设备UUID</h2><p>UUID每次获取的值都是不一样的。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>+ (NSString *)getUUID{\n    CFUUIDRef puuid = CFUUIDCreate(nil);\n    CFStringRef uuidString = CFUUIDCreateString(nil, puuid);\n    NSString *result = (NSString *)CFBridgingRelease(CFStringCreateCopy(NULL, uuidString));\n    NSMutableString *tmpResult = result.mutableCopy;\n    // 去除“-”\n    NSRange range = [tmpResult rangeOfString:@&quot;-&quot;];\n    while (range.location != NSNotFound) {\n        [tmpResult deleteCharactersInRange:range];\n        range = [tmpResult rangeOfString:@&quot;-&quot;];\n    }\n    NSLog(@&quot;UUID:%@&quot;,tmpResult);\n    return tmpResult;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="keychain"><a class="header-anchor" href="#keychain">#</a> KeyChain</h2><p>简介：iOS整个系统有一个<code>KeyChain</code>，每个程序都可以往<code>KeyChain</code>中记录数据，而且只能读取到自己程序记录在<code>KeyChain</code>中的数据。而且就算我们程序删除掉，系统经过升级以后再安装回来，依旧可以获取到与之前一致的<code>UUID</code>（系统还原、刷机除外）。因此我们可以将<code>UUID</code>的字符串存储到<code>KeyChain</code>中，然后下次直接从<code>KeyChain</code>获取<code>UUID</code>字符串。（本示例中使用<code>KeychainItemWrapper</code>工具类）</p><ul><li>获取</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>+ (NSString *)UUID {\n    KeychainItemWrapper *keyChainWrapper = [[KeychainItemWrapper alloc] initWithIdentifier:@&quot;MYAppID&quot; accessGroup:@&quot;com.test.app&quot;];\n    NSString *UUID = [keyChainWrapper objectForKey:(__bridge id)kSecValueData];\n\n    if (UUID == nil || UUID.length == 0) {\n        UUID = [[[UIDevice currentDevice] identifierForVendor] UUIDString];\n        [keyChainWrapper setObject:UUID forKey:(__bridge id)kSecValueData];\n    }\n\n    return UUID;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',7),r={render:function(e,n){return s}}}}]);