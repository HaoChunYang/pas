(self.webpackChunkbugu=self.webpackChunkbugu||[]).push([[9418],{6342:(e,s,n)=>{"use strict";n.r(s),n.d(s,{data:()=>l});const l={key:"v-474c84f0",path:"/old_blog/GIT%20Submodule%E7%9A%84%E4%BD%BF%E7%94%A8.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"初始化命令",slug:"初始化命令",children:[]},{level:2,title:"submodules的源码包管理",slug:"submodules的源码包管理",children:[]},{level:2,title:"submodules命令别名",slug:"submodules命令别名",children:[]}],filePathRelative:"old_blog/GIT Submodule的使用.md",git:{updatedTime:1597237797e3}}},4175:(e,s,n)=>{"use strict";n.r(s),n.d(s,{default:()=>a});const l=(0,n(6252).uE)('<p>在下载使用Flutter官方Demo万物起源《HistoryOfEverything》时，使用到<code>git submodule init </code>命令。这里学习一下。</p><hr><h2 id="初始化命令"><a class="header-anchor" href="#初始化命令">#</a> 初始化命令</h2><p>当一个项目需要包含其他支持项目源码时使用的功能，作用是两个项目是独立的，且主项目可以使用另一个支持项目。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git submodule add &lt;submodule_url&gt;  # 添加子项目\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加子项目后会出现.gitmodules的文件，这是一个配置文件，记录mapping between the project&#39;s URL and the local subdirectory。且.gitmodules在git版本控制中，这样其他参与项目的人才能知道submodule projects的情况。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git submodule init  # 初始化本地.gitmodules文件\ngit submodule update  # 同步远端submodule源码\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="submodules的源码包管理"><a class="header-anchor" href="#submodules的源码包管理">#</a> submodules的源码包管理</h2><p>如果获取的项目包含submodules，pull main project的时候不会同时获取submodules的源码，需要执行本地.gitmodules初始化的命令，再同步远端submodule源码。如果希望clone main project的时候包含所有submodules，可以使用下面的命令</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git clone --recurse-submodules &lt;main_project_url&gt;  # 获取主项目和所有子项目源码\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>操作submodules源码：先进入submodule的direcotry，再执行下述命令</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git fetch  # 获取submodule远端源码\ngit merge origin/&lt;branch_name&gt;  # 合并submodule远端源码\ngit pull  # 获取submodule远端源码合并到当前分支\ngit checkout &lt;branch_name&gt;  # 切换submodule的branch\ngit commit -am &quot;change_summary&quot;  # 提交submodule的commit\n\n# or\n\n# 更新submodule源码，默认更新的branch是master，如果要修改branch，在.gitmodule中设置\ngit submodule update --remote &lt;submodule_name&gt;  \n# 更新所有submodule源码，默认更新.gitmodule中设置的跟踪分支，未设置则跟踪master\ngit submodule update --remote  \n# 当submodule commits提交有问题的时候放弃整个push\ngit push --recurse-submodules=check\n# 分开提交submodule和main project\ngit push --recurse-submodules=on-demand\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>.gitmodule内容大致如下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[submodule &lt;submodule_name&gt;]\n    path = &lt;local_directory&gt;\n    url = &lt;remote_url&gt;\n    branch = &lt;remote_update_branch_name&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>用&#39;foreach&#39;关键字同时管理多个submodules，如下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># stash所有submodules\ngit submodule foreach &#39;git stash&#39;\n# 所有submodules创建新分支\ngit submodule foreach &#39;git checkout -b &lt;branch_name&gt;&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="submodules命令别名"><a class="header-anchor" href="#submodules命令别名">#</a> submodules命令别名</h2><p>submodules的命令很长，为提升效率，可以创建alias，记录在.git/config路径下。如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git config alias.spush &#39;push --recurse-submodules=on-demand&#39;\ngit config alias.supdate &#39;submodule update --remote --merge&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样，可以使用下面的命令来提高效率</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git supdate\ngit spush\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',21),a={render:function(e,s){return l}}}}]);